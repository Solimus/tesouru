document.addEventListener('DOMContentLoaded', () => {
    const gameBoard = document.querySelector('.game-board');
    const message = document.getElementById('message');
    const restartButton = document.getElementById('restartButton');
    let treasureIndex;
    const gridSize = 25; // Define o tamanho da grade (5x5)
    
    // Fun√ß√£o para inicializar o jogo
    function initializeGame() {
        gameBoard.innerHTML = ''; // Limpa o tabuleiro
        treasureIndex = Math.floor(Math.random() * gridSize); // Gera a posi√ß√£o do tesouro aleatoriamente
        message.textContent = ''; // Limpa a mensagem
        createBoard(); // Cria o tabuleiro
    }
    
    // Fun√ß√£o para criar o tabuleiro
    function createBoard() {
        for (let i = 0; i < gridSize; i++) {
            const cell = document.createElement('div');
            cell.classList.add('cell');
            cell.dataset.index = i;
            cell.addEventListener('click', handleCellClick);
            gameBoard.appendChild(cell);
        }
    }
    
    // Fun√ß√£o para lidar com o clique nas c√©lulas
    function handleCellClick(event) {
        const cell = event.target; // Obt√©m o elemento que foi clicado
        const cellIndex = parseInt(cell.dataset.index); // Converte o √≠ndice da c√©lula (armazenado no atributo data-index) para um n√∫mero inteiro
        
        // Verifica se a c√©lula j√° foi clicada
        if (cell.classList.contains('clicked')) return; // Se a c√©lula j√° tem a classe 'clicked', a fun√ß√£o retorna imediatamente e n√£o faz mais nada
        
        // Marca a c√©lula como clicada adicionando a classe 'clicked'
        cell.classList.add('clicked');
        
        // Verifica se o √≠ndice da c√©lula clicada √© igual ao √≠ndice do tesouro
        if (cellIndex === treasureIndex) {
            message.textContent = 'Parab√©ns! Voc√™ encontrou o tesouro!'; // Atualiza a mensagem de feedback
            message.style.color = 'green'; // Define a cor da mensagem para verde
            revealTreasure(); // Chama a fun√ß√£o para revelar o tesouro
        } else {
            message.textContent = 'Continue procurando...'; // Atualiza a mensagem de feedback
            message.style.color = 'blue'; // Define a cor da mensagem para azul
        }
    }
    
    
    // Fun√ß√£o para revelar a posi√ß√£o do tesouro
    function revealTreasure() {
        const cells = document.querySelectorAll('.cell');  // Seleciona todas as c√©lulas do tabuleiro que t√™m a classe cell e as armazena na vari√°vel cells como uma NodeList. Uma NodeList √© uma cole√ß√£o de n√≥s do documento que podem ser manipulados como um array.
        cells[treasureIndex].textContent = 'üí∞'; // Define o conte√∫do de texto (textContent) dessa c√©lula para 'üí∞', que √© o s√≠mbolo de um ba√∫ de tesouro. Isso visualmente indica ao jogador que o tesouro foi encontrado nessa c√©lula.
        cells.forEach(cell => cell.removeEventListener('click', handleCellClick)); // Remove os eventos de clique das c√©lulas
    }
    
    // Evento para reiniciar o jogo
    restartButton.addEventListener('click', initializeGame);
    
    // Inicializa o jogo pela primeira vez
    initializeGame();
});